---
- name: Add Docker repo in RedHat
  when:
    - ansible_architecture == 'x86_64'
    - ansible_os_family == 'RedHat'
  become: true
  environment:
    https_proxy: "{{ http_proxy if http_proxy is defined else '' }}"
  get_url:
    url: "https://download.docker.com/linux/{{ ansible_distribution|lower }}/docker-ce.repo"
    dest: /etc/yum.repos.d/docker-ce.repo
  notify: Notify updates of Docker via Slack

- name: Add the GPG key for Docker in Ubuntu
  when: ansible_distribution == 'Ubuntu'
  become: true
  environment:
    https_proxy: "{{ http_proxy if http_proxy is defined else '' }}"
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    id: 0EBFCD88
    state: present
  notify: Notify updates of Docker via Slack

- name: Add Docker repo in Ubuntu
  when:
    - ansible_architecture == 'x86_64'
    - ansible_distribution == 'Ubuntu'
  become: true
  environment:
    https_proxy: "{{ http_proxy if http_proxy is defined else '' }}"
  apt_repository:
    repo: "deb [arch={{ 'amd64' if ansible_architecture == 'x86_64' else 'armhf' }}] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    state: present
    filename: docker
  notify: Notify updates of Docker via Slack

- name: Check installed Docker CE in RHEL
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version|int >= 8
  become: true
  dnf:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
    state: present
  ignore_errors: true
  register: dnf_docker_ce_installed
  changed_when: false

- name: Uninstall old versions of Docker in RHEL
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version|int >= 8
    - dnf_docker_ce_installed is failed
  become: true
  dnf:
    autoremove: yes
    name:
      - runc
      - docker
      - docker-client
      - docker-client-latest
      - docker-common
      - docker-latest
      - docker-latest-logrotate
      - docker-logrotate
      - docker-selinux
      - docker-engine-selinux
      - docker-engine
    state: absent

- name: Check installed Docker CE in CentOS7
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version|int < 8
  become: true
  yum:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
    state: present
  ignore_errors: true
  register: yum_docker_ce_installed
  changed_when: false

- name: Uninstall old versions of Docker in CentOS7
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version|int < 8
    - yum_docker_ce_installed is failed
  become: true
  yum:
    name:
      - docker
      - docker-client
      - docker-client-latest
      - docker-common
      - docker-latest
      - docker-latest-logrotate
      - docker-logrotate
      - docker-selinux
      - docker-engine-selinux
      - docker-engine
    state: absent

- name: Check installed Docker CE in Ubuntu
  when: ansible_distribution == 'Ubuntu'
  become: true
  apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
    state: present
  ignore_errors: true
  register: apt_docker_ce_installed
  changed_when: false

- name: Uninstall old versions of Docker in Ubuntu
  when:
    - ansible_distribution == 'Ubuntu'
    - apt_docker_ce_installed is failed
  become: true
  apt:
    autoclean: yes
    autoremove: yes
    name:
      - docker
      - docker-engine
      - docker.io
    state: absent

- name: Install Docker CE in RHEL
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version|int >= 8
  become: true
  dnf:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
    enablerepo: docker-ce-edge
    state: latest
  notify:
    - Check running containers
    - Restart Docker
    - Notify updates of Docker via Slack

- name: Install Docker CE in CentOS7
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version|int < 8
  become: true
  yum:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
    enablerepo: docker-ce-stable
    state: latest
  notify:
    - Check running containers
    - Restart Docker
    - Notify updates of Docker via Slack

- name: Install Docker CE in Ubuntu
  when: ansible_distribution == 'Ubuntu'
  become: true
  apt:
    autoclean: yes
    autoremove: yes
    update_cache: yes
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
    state: latest
  notify:
    - Check running containers
    - Restart Docker
    - Notify updates of Docker via Slack

- name: Create /etc/docker/
  become: true
  file:
    path: /etc/docker
    state: directory
    owner: root
    group: root
    mode: 0700
  notify: Notify updates of Docker via Slack

- name: Set user.max_user_namespaces
  when:
    - docker_userns_remap is defined
  become: true
  sysctl:
    name: user.max_user_namespaces
    value: '15000'
    sysctl_set: yes
    state: present
    reload: yes
    sysctl_file: /etc/sysctl.d/docker.conf
  notify: Notify updates of Docker via Slack

- name: Set net.ipv4.ip_forward
  when:
    - docker_userns_remap is defined
  become: true
  sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    sysctl_set: yes
    state: present
    reload: yes
    sysctl_file: /etc/sysctl.d/docker.conf
  notify: Notify updates of Docker via Slack

- name: Set a variable for Docker daemon
  set_fact:
    docker_daemon_vars: |
      {% set d = {'storage-driver': 'overlay2', 'exec-opts': ['native.cgroupdriver=systemd']} %}
      {% if docker_data_root is defined %}
      {%   set _ = d.update({'data-root': docker_data_root}) %}
      {% endif %}
      {% if docker_userns_remap is defined %}
      {%   set _ = d.update({'userns-remap': docker_userns_remap, 'ip-forward': true, 'ip': '0.0.0.0'}) %}
      {% endif %}
      {% if use_nvidia_docker|bool %}
      {%   set _ = d.update({'runtimes': {'nvidia': {'path': 'nvidia-container-runtime', 'runtimeArgs': []}}}) %}
      {% endif %}
      {{ d }}

- name: Put /etc/docker/daemon.json
  become: true
  copy:
    content: "{{ docker_daemon_vars|to_nice_json }}"
    dest: /etc/docker/daemon.json
  notify:
    - Check running containers
    - Restart Docker
    - Notify updates of Docker via Slack

- name: Create /etc/systemd/system/docker.service.d/
  when: http_proxy is defined or https_proxy is defined
  become: true
  file:
    path: /etc/systemd/system/docker.service.d
    state: directory
    owner: root
    group: root
    mode: 0755

- name: Put /etc/systemd/system/docker.service.d/option.conf
  when: http_proxy is defined or https_proxy is defined
  become: true
  template:
    src: option.conf.j2
    dest: /etc/systemd/system/docker.service.d/option.conf
  notify:
    - Check running containers
    - Restart Docker
    - Notify updates of Docker via Slack

- name: Add users to %docker
  when: docker_users is defined
  become: true
  user:
    name: "{{ item }}"
    groups: docker
    append: yes
  with_items: "{{ docker_users }}"
  notify: Notify updates of Docker via Slack

- name: Add NVIDIA Docker repo in RedHat
  when:
    - use_nvidia_docker|bool
    - ansible_architecture == 'x86_64'
    - ansible_os_family == 'RedHat'
  become: true
  environment:
    https_proxy: "{{ http_proxy if http_proxy is defined else '' }}"
  get_url:
    url: "https://nvidia.github.io/nvidia-docker/centos{{ ansible_distribution_major_version if ansible_distribution == 'CentOS' else '8' }}/nvidia-docker.repo"
    dest: /etc/yum.repos.d/nvidia-docker.repo
  notify: Notify updates of Docker via Slack

- name: Add the GPG key for NVIDIA Docker in Ubuntu
  when:
    - use_nvidia_docker|bool
    - ansible_distribution == 'Ubuntu'
  become: true
  environment:
    https_proxy: "{{ http_proxy if http_proxy is defined else '' }}"
  apt_key:
    url: https://nvidia.github.io/nvidia-docker/gpgkey
    state: present
  notify: Notify updates of Docker via Slack

- name: Add NVIDIA Docker repo in Ubuntu
  when:
    - use_nvidia_docker|bool
    - ansible_architecture == 'x86_64'
    - ansible_distribution == 'Ubuntu'
  become: true
  environment:
    https_proxy: "{{ http_proxy if http_proxy is defined else '' }}"
  get_url:
    url: "https://nvidia.github.io/nvidia-docker/{{ ansible_distribution|lower + ansible_distribution_version }}/nvidia-docker.list"
    dest: /etc/apt/sources.list.d/nvidia-docker.list
  notify: Notify updates of Docker via Slack

- name: Install NVIDIA Docker in RHEL
  when:
    - use_nvidia_docker|bool
    - ansible_os_family == 'RedHat'
  become: true
  dnf:
    name: nvidia-container-toolkit
    state: latest
    enablerepo:
      - nvidia-docker
      - nvidia-container-runtime
      - libnvidia-container
  ignore_errors: true
  notify:
    - Reload Docker daemon configurations
    - Check running containers
    - Restart Docker
    - Notify updates of Docker via Slack

- name: Install NVIDIA Docker in CentOS7
  when:
    - use_nvidia_docker|bool
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version|int < 8
  become: true
  yum:
    name: nvidia-container-toolkit
    state: latest
    enablerepo:
      - nvidia-docker
      - nvidia-container-runtime
      - libnvidia-container
  ignore_errors: true
  notify:
    - Reload Docker daemon configurations
    - Check running containers
    - Restart Docker
    - Notify updates of Docker via Slack

- name: Install NVIDIA Docker in Ubuntu
  when:
    - use_nvidia_docker|bool
    - ansible_distribution == 'Ubuntu'
  become: true
  apt:
    autoclean: yes
    autoremove: yes
    update_cache: yes
    name: nvidia-container-toolkit
    state: latest
  ignore_errors: true
  notify:
    - Reload Docker daemon configurations
    - Check running containers
    - Restart Docker
    - Notify updates of Docker via Slack

- name: Start and enable Docker
  become: true
  systemd:
    name: docker
    state: started
    daemon_reload: yes
    enabled: yes
  notify: Notify updates of Docker via Slack

- name: Pull images
  when: docker_images is defined
  become: true
  docker_image:
    name: "{{ item }}"
  with_items: "{{ docker_images }}"
  ignore_errors: true
  notify: Notify updates of Docker via Slack

- name: Add %docker
  when: docker_users is defined
  become: true
  group:
    name: docker
    state: present
  notify: Notify updates of Docker via Slack
