---
- name: Add Kubernetes repo in Fedora
  when: ansible_distribution == 'Fedora'
  become: true
  copy:
    src: kubernetes.repo
    dest: /etc/yum.repos.d/kubernetes.repo
  notify: Notify updates of Kubernetes via Slack

- name: Add Kubernetes repo in CentOS
  when: ansible_distribution == 'CentOS'
  become: true
  yum_repository:
    name: kubernetes
    description: Kubernetes repo
    baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-$basearch
    enabled: yes
    gpgcheck: yes
    repo_gpgcheck: yes
    gpgkey: "https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg"
  notify: Notify updates of Kubernetes via Slack

- name: Add the GPG key for Kubernetes in Debian
  when: ansible_os_family == 'Debian'
  become: true
  environment:
    https_proxy: "{{ http_proxy if http_proxy is defined else '' }}"
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present
  notify: Notify updates of Kubernetes via Slack

- name: Add Kubernetes repo in Debian
  when: ansible_os_family == 'Debian'
  become: true
  environment:
    https_proxy: "{{ http_proxy if http_proxy is defined else '' }}"
  apt_repository:
    repo: "deb [arch=amd64] http://apt.kubernetes.io/ kubernetes-xenial main"
    state: present
    filename: kubernetes
  notify: Notify updates of Kubernetes via Slack

- name: Install Kubernetes with dnf
  when: ansible_distribution == 'Fedora'
  become: true
  dnf:
    name: "{{ item }}"
    state: latest
  with_items:
    - flannel
    - kubeadm
    - kubectl
    - kubelet
  notify: Notify updates of Kubernetes via Slack

- name: Install Kubernetes with yum
  when: ansible_distribution == 'CentOS'
  become: true
  yum:
    name: "{{ item }}"
    state: latest
  with_items:
    - flannel
    - kubeadm
    - kubectl
    - kubelet
  notify: Notify updates of Kubernetes via Slack

- name: Install Kubernetes with apt
  when: ansible_distribution == 'Ubuntu'
  become: true
  apt:
    autoclean: yes
    autoremove: yes
    update_cache: yes
    name: "{{ item }}"
    state: latest
  with_items:
    - flannel
    - kubeadm
    - kubectl
    - kubelet
  notify: Notify updates of Kubernetes via Slack

- name: Set /etc/sysctl.d/k8s.conf
  become: true
  sysctl:
    name: "{{ item }}"
    value: 1
    sysctl_file: /etc/sysctl.d/k8s.conf
  with_items:
    - net.bridge.bridge-nf-call-ip6tables
    - net.bridge.bridge-nf-call-iptables
  notify: Notify updates of Kubernetes via Slack

- name: Start and enable kubelet
  become: true
  systemd:
    name: kubelet
    state: started
    daemon_reload: yes
    enabled: yes
  notify: Notify updates of Kubernetes via Slack

- name: Remove swapfile from /etc/fstab
  when:
    - disable_swap is defined
    - disable_swap
  become: true
  mount:
    name: swap
    fstype: swap
    state: absent
  register: remove_swapfile
  notify: Notify updates of Kubernetes via Slack

- name: Disable swap
  when:
    - disable_swap is defined
    - disable_swap
    - remove_swapfile is succeeded
    - ansible_swaptotal_mb > 0
  become: true
  shell: |
    swapoff -a
  notify: Notify updates of Kubernetes via Slack

- name: Check /etc/kubernetes/kubelet.conf
  when:
    - k8s_master is defined or k8s_nodes is defined
  stat:
    path: /etc/kubernetes/kubelet.conf
  register: stat_k8s_conf

- name: Reset Kubernetes clusters
  when:
    - k8s_master is defined or k8s_nodes is defined
    - reset_k8s is defined
    - reset_k8s
    - stat_k8s_conf.stat.exists
  become: true
  shell: |
    kubeadm reset -f
  ignore_errors: yes
  notify: Notify updates of Kubernetes via Slack

- name: Restart kubelet
  when:
    - k8s_master is defined or k8s_nodes is defined
    - ! stat_k8s_conf.stat.exists or reset_k8s
  become: true
  systemd:
    name: kubelet
    state: restarted
    daemon_reload: yes
    enabled: yes
  notify: Notify updates of Kubernetes via Slack

- name: Set variables for kubernetes clusters
  set_fact:
    k8s_init_log: 'kubeadm_init.log'
    k8s_join_sh: 'kubeadm_join.sh'

- name: Initilize a k8s master
  when:
    - k8s_master is defined
    - inventory_hostname == k8s_master
    - ! stat_k8s_conf.stat.exists or reset_k8s
  become: true
  environment:
    HTTPS_PROXY: "{{ http_proxy if http_proxy is defined else '' }}"
  shell: |
    kubeadm init --pod-network-cidr=10.244.0.0/16 | tee /tmp/{{ k8s_init_log }} && exit ${PIPESTATUS[0]}
  notify: Notify updates of Kubernetes via Slack

- name: Create ~/.kube/
  when:
    - k8s_master is defined
    - inventory_hostname == k8s_master
  file:
    path: "{{ ansible_env.HOME }}/.kube"
    state: directory
  notify: Notify updates of Kubernetes via Slack

- name: Copy ~/.kube/config
  when:
    - k8s_master is defined
    - inventory_hostname == k8s_master
  become: true
  copy:
    src: /etc/kubernetes/admin.conf
    dest: "{{ ansible_env.HOME }}/.kube/config"
    owner: "{{ ansible_real_user_id }}"
    group: "{{ ansible_real_group_id }}"
    remote_src: yes
  notify: Notify updates of Kubernetes via Slack

- name: Install a pod network add-on
  when:
    - k8s_master is defined
    - inventory_hostname == k8s_master
    - ! stat_k8s_conf.stat.exists or reset_k8s
  environment:
    HTTPS_PROXY: "{{ http_proxy if http_proxy is defined else '' }}"
  shell: |
    kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
  notify: Notify updates of Kubernetes via Slack

- name: Isolate a k8s master
  when:
    - isolate_k8s_master is defined
    - isolate_k8s_master
    - k8s_master is defined
    - inventory_hostname == k8s_master
    - ! stat_k8s_conf.stat.exists or reset_k8s
  shell: |
    kubectl taint nodes --all node-role.kubernetes.io/master-
  notify: Notify updates of Kubernetes via Slack

- name: Extract a join command for nodes
  when:
    - k8s_master is defined
    - inventory_hostname == k8s_master
    - ! stat_k8s_conf.stat.exists or reset_k8s
  become: true
  shell: |
    grep -e 'kubeadm join .* --token' /tmp/{{ k8s_init_log }} | tail -1 > /tmp/{{ k8s_join_sh }}
  register: kubeadm_join

- name: Fetch a join script
  when:
    - k8s_master is defined
    - inventory_hostname == k8s_master
    - ! stat_k8s_conf.stat.exists or reset_k8s
  become: true
  fetch:
    src: "/tmp/{{ k8s_join_sh }}"
    dest: /tmp/
    flat: yes

- name: Join k8s nodes
  when:
    - kubeadm_join is defined
    - k8s_nodes is defined
    - inventory_hostname in k8s_nodes
    - ! stat_k8s_conf.stat.exists or reset_k8s
  become: true
  script: "/tmp/{{ k8s_join_sh }}"
  args:
    executable: bash
  notify: Notify updates of Kubernetes via Slack
